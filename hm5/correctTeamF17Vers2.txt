Standard ML of New Jersey v110.78 [built: Sun Dec 21 15:52:08 2014]
- val somePairWorks = fn
  : ('a -> bool) -> ('b -> bool) -> ('a * 'b) list -> bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = true : bool
val worksForAll = fn : ('a -> bool) -> 'a list -> bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = false : bool
val someListWorks = fn : ('a -> bool) -> 'a list list -> bool
datatype RE
  = atom of char | conc of RE * RE | emptyset | star of RE | union of RE * RE
val a = atom #"a" : RE
val b = atom #"b" : RE
val space = atom #" " : RE
val arbWS = star (atom #" ") : RE
val nonEmptyWS = conc (atom #" ",star (atom #" ")) : RE
val aStarBStar = conc (star (atom #"a"),star (atom #"b")) : RE
val justLambda = star emptyset : RE
val aPlusBPlus = conc (conc (atom #,star #),conc (atom #,star #)) : RE
val aOrB = union (atom #"a",atom #"b") : RE
val allABPairs = conc (union (atom #,atom #),union (atom #,atom #)) : RE
val twoEmpties = union (emptyset,emptyset) : RE
val firstEmpty = union (emptyset,atom #"a") : RE
val secondEmpty = union (atom #"b",emptyset) : RE
val leftConcEmpty = conc (union (emptyset,emptyset),atom #"a") : RE
val rightConcEmpty = conc (atom #"b",union (emptyset,emptyset)) : RE
val bothConcEmpty = conc (emptyset,emptyset) : RE
val inffirstEmpty = union (emptyset,conc (star #,star #)) : RE
val infsecondEmpty = union (conc (conc #,conc #),emptyset) : RE
val infleftConcEmpty = conc (union (emptyset,emptyset),star (atom #" ")) : RE
val infrightConcEmpty = conc (conc (atom #,star #),union (emptyset,emptyset))
  : RE
val aStar = star (atom #"a") : RE
val Digit = union (atom #"0",union (atom #,union #)) : RE
val Unsigned = conc (union (atom #,union #),star (union (#,#))) : RE
val Signed = conc (union (star #,atom #),conc (union #,star #)) : RE
val Mantissa = conc (conc (union #,conc #),conc (atom #,conc #)) : RE
val Exponent = conc (atom #"e",conc (union #,conc #)) : RE
val hasExponent = conc (union (conc #,conc #),conc (atom #,conc #)) : RE
val FloatingPoint = union (conc (conc #,conc #),conc (union #,conc #)) : RE
val isEmpty = fn : RE -> bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = true : bool
val containsLambda = fn : RE -> bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = false : bool
val containsMoreThanLambda = fn : RE -> bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = false : bool
= val isInfinite = fn : RE -> bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = false : bool
val allTwoSplits = fn : string -> (string * string) list
val it = [] : (string * string) list
val it = [] : (string * string) list
val it = [("a","b")] : (string * string) list
val it =
  [("a","bcdefg"),("ab","cdefg"),("abc","defg"),("abcd","efg"),("abcde","fg"),
   ("abcdef","g")] : (string * string) list
val isIn = fn : RE -> string -> bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = false : bool
val ShowABreak = "*****************************************" : string
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = false : bool
val it = true : bool
val it = true : bool
val it = false : bool
val it = false : bool
val it = false : bool
val test2 =
  ["-123","1.2","0.0","-0.0","1.-00","-1.-00","1.9","2.8","3.7","4.6","5.5",
   "6.4",...] : string list
val test2CorrectResults =
  [false,true,true,true,false,false,true,true,true,true,true,true,...]
  : bool list
val it = 187 : int
val it = 187 : int
stdIn:1075.28 Warning: calling polyEqual
val identifyErrorIndices = fn : int -> ''a list -> ''a list -> int list
val it = [] : int list
exception parserFailure
val matcherGenerator = fn : char -> char list -> char list
val S = fn : char list -> char list
val L = fn : char list -> char list
val X = fn : char list -> char list
val Q = fn : char list -> char list
val E = fn : char list -> char list
val W = fn : char list -> char list
val N = fn : char list -> char list
val B = fn : char list -> char list
val parse = fn : string -> bool
val e1 = "" : string
val e2 = "$" : string
val e3 = "1" : string
val e4 = "0" : string
val e5 = "2" : string
val e6 = "," : string
val e7 = "(" : string
val e8 = ")" : string
val e9 = " " : string
val e10 = "a" : string
val e11 = "()" : string
val e12 = "(1)" : string
val e13 = "(0, 1)" : string
val e14 = "((), " : string
val e15 = "((), 0" : string
val e16 = "((), 1" : string
val e17 = "(0, " : string
val e18 = "(0, 0" : string
val e19 = "(0, 1" : string
val e20 = "(1, " : string
val e21 = "(1, 0" : string
val e22 = "(1, 1" : string
val e23 = "(00)$" : string
val e24 = "(0,1)$" : string
val e25 = "()$ " : string
val e26 = "((),())$" : string
val e27 = "((),0)$" : string
val e28 = "((),1)$" : string
val e29 = "(0,())$" : string
val e30 = "(0,0)$" : string
val e31 = "(0,1)$" : string
val e32 = "(1,())$" : string
val e33 = "(1,0)$" : string
val e34 = "(((1)),1)$" : string
val e35 = "((1),(0))$" : string
val e36 = "((),(1))$" : string
val e37 = "((0),())$" : string
val e38 = "((),())$" : string
val e39 = "(1,())$" : string
val e40 = "((),(1))$" : string
val e41 = "($)$" : string
val e42 = "(,)$" : string
val e43 = "(0($" : string
val e44 = "( )$" : string
val e45 = "(1 11 111)$" : string
val e46 = "(1 11 111 )$" : string
val e47 = "(1, 10, 11, )$" : string
val e48 = "(1, 10, 11,)$" : string
val e49 = "((((())))$" : string
val e50 = "(((((((()))))))))$" : string
val errTests = ["","$","1","0","2",",","(",")"," ","a","()","(1)",...]
  : string list
val it = [] : int list
val s1 = "()$" : string
val s2 = "(0)$" : string
val s3 = "(1)$" : string
val s4 = "(11011010)$" : string
val s5 = "(11)$" : string
val s6 = "(10)$" : string
val s7 = "(0, 1)$" : string
val s8 = "(1, 0)$" : string
val s9 = "(0, 1, 10, 11, 100, 101, 110, 111, 1000)$" : string
val s10 = "(1, 1, 1)$" : string
val s11 = "((), ())$" : string
val s12 = "((), 0)$" : string
val s13 = "(1, ())$" : string
val s14 = "((1), (()))$" : string
val s15 = "((11), (0))$" : string
val s16 = "(((1010)), 1)$" : string
val s17 = "(((1010)), ((0)))$" : string
val s18 = "(1001, ((0)))$" : string
val s19 = "(1, 11, 111)$" : string
val s20 = "(1, 11, (1100))$" : string
val s21 = "(1, 11, ((111)))$" : string
val s22 = "(1, (11), 111)$" : string
val s23 = "(1, (11), (111))$" : string
val s24 = "(1, (11), ((111)))$" : string
val s25 = "(1, ((11)), 111)$" : string
val s26 = "(1, ((11)), (111))$" : string
val s27 = "(1, ((11)), ((111)))$" : string
val s28 = "((1), 11, 111)$" : string
val s29 = "((1), 11, (1100))$" : string
val s30 = "((1), 11, ((111)))$" : string
val s31 = "((1), (11), 111)$" : string
val s32 = "((1), (11), (111))$" : string
val s33 = "((1), (11), ((111)))$" : string
val s34 = "((1), ((11)), 111)$" : string
val s35 = "((1), ((11)), (111))$" : string
val s36 = "((1), ((11)), ((111)))$" : string
val s37 = "(((1)), 11, 111)$" : string
val s38 = "(((1)), 11, (1100))$" : string
val s39 = "(((1)), 11, ((111)))$" : string
val s40 = "(((1)), (11), 111)$" : string
val s41 = "(((1)), (11), (111))$" : string
val s42 = "(((1)), (11), ((111)))$" : string
val s43 = "(((1)), ((11)), 111)$" : string
val s44 = "(((1)), ((11)), (111))$" : string
val s45 = "(((1)), ((11)), ((111)))$" : string
val s46 = "((), (0), (1, 10), (0, (), 1), 11, (((((100))))))$" : string
val s47 =
  "((1, ()), (((10)), 0), (((1, 10))), ((((0, (), 1)))), 11, (((((100))))#"
  : string
val s48 =
  "((((0))), ((1, (10, 11, 100)), ((1, 10, 110), 111), (1, (10, 110), 111#"
  : string
val s49 =
  "((((0))), ((1, (10, 11, 100)), ((1, 10, 110), 111), (1, (10, 110), 111#"
  : string
val s50 =
  "((((0))), (1, (10, 11, 100)), (((1, 10, 110), 111), (1, (10, 110), 111#"
  : string
val correctTests =
  ["()$","(0)$","(1)$","(11011010)$","(11)$","(10)$","(0, 1)$","(1, 0)$",
   "(0, 1, 10, 11, 100, 101, 110, 111, 1000)$","(1, 1, 1)$","((), ())$",
   "((), 0)$",...] : string list
val it = [] : int list
datatype BinaryOps = ADD | DIV | MOD | MULT | SUBTRACT
datatype Expression
  = BinaryExp of BinaryOps * Expression * Expression
  | Constant of int
  | Negation of Expression
  | Variable of string
exception UndefinedVariable of string
exception DivisionByZero
val lookup = fn : (string * int) list -> string -> int
val evaluateExpression = fn : (string * int) list -> Expression -> int
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
val runEvaluateExpression = fn : (string * int) list -> Expression -> string
val e9 = Variable "n1" : Expression
val e10 = Variable "n2" : Expression
val e11 = Variable "n3" : Expression
val e12 = Variable "n4" : Expression
val e13 = Variable "n5" : Expression
val e14 = Variable "n6" : Expression
val e15 = Variable "n7" : Expression
val e16 = Variable "n8" : Expression
val e17 = Variable "n9" : Expression
val e18 = Variable "n10" : Expression
val e19 = Variable "n11" : Expression
val e20 = Variable "n12" : Expression
val sameAsConst =
  [("n1",~1),("n2",0),("n3",1),("n4",~2),("n5",~3),("n6",2),("n7",3),
   ("n8",10),("n9",43),("n10",~43),("n11",5),("n12",~5)] : (string * int) list
val e1 = Constant ~1 : Expression
val e2 = Constant 0 : Expression
val e3 = Constant 1 : Expression
val e4 = Constant ~2 : Expression
val e5 = Constant ~3 : Expression
val e6 = Constant 2 : Expression
val e7 = Constant 3 : Expression
val e8 = Constant 10 : Expression
val e21 = BinaryExp (ADD,Constant ~1,Constant 0) : Expression
val e22 = BinaryExp (ADD,Constant ~1,Constant ~3) : Expression
val e23 = BinaryExp (ADD,Constant ~1,Constant 10) : Expression
val e24 = BinaryExp (ADD,Constant ~1,Constant 1) : Expression
val e25 = BinaryExp (ADD,Constant 10,Constant 10) : Expression
val e26 = BinaryExp (SUBTRACT,Constant ~1,Constant 0) : Expression
val e27 = BinaryExp (SUBTRACT,Constant 0,Constant ~1) : Expression
val e28 = BinaryExp (SUBTRACT,Constant 10,Constant 10) : Expression
val e29 = BinaryExp (SUBTRACT,Constant 10,Constant 3) : Expression
val e30 = BinaryExp (SUBTRACT,Constant 3,Constant 10) : Expression
val e31 = BinaryExp (MULT,Constant ~1,Constant 0) : Expression
val e32 = BinaryExp (MULT,Constant 0,Constant 1) : Expression
val e33 = BinaryExp (MULT,Constant ~1,Constant 10) : Expression
val e34 = BinaryExp (MULT,Constant 10,Constant 1) : Expression
val e35 = BinaryExp (MULT,Constant 10,Constant ~3) : Expression
val e36 = BinaryExp (MULT,Constant ~3,Constant 3) : Expression
val e37 = BinaryExp (MULT,Constant ~2,Constant ~3) : Expression
val e38 = BinaryExp (DIV,Constant ~1,Constant 0) : Expression
val e39 = BinaryExp (DIV,Constant 0,Constant 1) : Expression
val e40 = BinaryExp (DIV,Constant ~1,Constant 10) : Expression
val e41 = BinaryExp (DIV,Constant 10,Constant 1) : Expression
val e42 = BinaryExp (DIV,Constant 10,Constant ~3) : Expression
val e43 = BinaryExp (DIV,Constant ~3,Constant 3) : Expression
val e44 = BinaryExp (DIV,Constant ~2,Constant ~3) : Expression
val e45 = BinaryExp (DIV,Constant ~1,Constant 0) : Expression
val e46 = BinaryExp (DIV,Constant 43,Constant ~5) : Expression
val e47 = BinaryExp (DIV,Constant 43,Constant 5) : Expression
val e48 = BinaryExp (DIV,Constant ~43,Constant ~5) : Expression
val e49 = BinaryExp (DIV,Constant ~43,Constant 5) : Expression
val e50 = BinaryExp (MOD,Constant ~1,Constant 0) : Expression
val e51 = BinaryExp (MOD,Constant 0,Constant 1) : Expression
val e52 = BinaryExp (MOD,Constant ~1,Constant 10) : Expression
val e53 = BinaryExp (MOD,Constant 10,Constant 1) : Expression
val e54 = BinaryExp (MOD,Constant 10,Constant ~3) : Expression
val e55 = BinaryExp (MOD,Constant ~3,Constant 3) : Expression
val e56 = BinaryExp (MOD,Constant ~2,Constant ~3) : Expression
val e57 = BinaryExp (MOD,Constant ~1,Constant 0) : Expression
val e58 = BinaryExp (MOD,Constant 43,Constant ~5) : Expression
val e59 = BinaryExp (MOD,Constant 43,Constant 5) : Expression
val e60 = BinaryExp (MOD,Constant ~43,Constant ~5) : Expression
val e61 = BinaryExp (MOD,Constant ~43,Constant 5) : Expression
val e62 = Negation (BinaryExp (ADD,Constant ~1,Constant 0)) : Expression
val e63 = Negation (BinaryExp (ADD,Constant ~1,Constant ~3)) : Expression
val e64 = Negation (BinaryExp (ADD,Constant ~1,Constant 10)) : Expression
val e65 = Negation (BinaryExp (ADD,Constant ~1,Constant 1)) : Expression
val e66 = Negation (BinaryExp (ADD,Constant 10,Constant 10)) : Expression
val e67 = Negation (BinaryExp (SUBTRACT,Constant ~1,Constant 0)) : Expression
val e68 = Negation (BinaryExp (SUBTRACT,Constant 0,Constant ~1)) : Expression
val e69 = Negation (BinaryExp (SUBTRACT,Constant 10,Constant 10)) : Expression
val e70 = Negation (BinaryExp (SUBTRACT,Constant 10,Constant 3)) : Expression
val e71 = Negation (BinaryExp (SUBTRACT,Constant 3,Constant 10)) : Expression
val e72 = Negation (BinaryExp (MULT,Constant ~1,Constant 0)) : Expression
val e73 = Negation (BinaryExp (MULT,Constant 0,Constant 1)) : Expression
val e74 = Negation (BinaryExp (MULT,Constant ~1,Constant 10)) : Expression
val e75 = Negation (BinaryExp (MULT,Constant 10,Constant 1)) : Expression
val e76 = Negation (BinaryExp (MULT,Constant 10,Constant ~3)) : Expression
val e77 = Negation (BinaryExp (MULT,Constant ~3,Constant 3)) : Expression
val e78 = Negation (BinaryExp (MULT,Constant ~2,Constant ~3)) : Expression
val e79 = Negation (BinaryExp (DIV,Constant ~1,Constant 0)) : Expression
val e80 = Negation (BinaryExp (DIV,Constant 0,Constant 1)) : Expression
val e81 = Negation (BinaryExp (DIV,Constant ~1,Constant 10)) : Expression
val e82 = Negation (BinaryExp (DIV,Constant 10,Constant 1)) : Expression
val e83 = Negation (BinaryExp (DIV,Constant 10,Constant ~3)) : Expression
val e84 = Negation (BinaryExp (DIV,Constant ~3,Constant 3)) : Expression
val e85 = Negation (BinaryExp (DIV,Constant ~2,Constant ~3)) : Expression
val e86 = Negation (BinaryExp (DIV,Constant ~1,Constant 0)) : Expression
val e87 = Negation (BinaryExp (DIV,Constant 43,Constant ~5)) : Expression
val e88 = Negation (BinaryExp (DIV,Constant 43,Constant 5)) : Expression
val e89 = Negation (BinaryExp (DIV,Constant ~43,Constant ~5)) : Expression
val e90 = Negation (BinaryExp (DIV,Constant ~43,Constant 5)) : Expression
val e91 = Negation (BinaryExp (MOD,Constant ~1,Constant 0)) : Expression
val e92 = Negation (BinaryExp (MOD,Constant 0,Constant 1)) : Expression
val e93 = Negation (BinaryExp (MOD,Constant ~1,Constant 10)) : Expression
val e94 = Negation (BinaryExp (MOD,Constant 10,Constant 1)) : Expression
val e95 = Negation (BinaryExp (MOD,Constant 10,Constant ~3)) : Expression
val e96 = Negation (BinaryExp (MOD,Constant ~3,Constant 3)) : Expression
val e97 = Negation (BinaryExp (MOD,Constant ~2,Constant ~3)) : Expression
val e98 = Negation (BinaryExp (MOD,Constant ~1,Constant 0)) : Expression
val e99 = Negation (BinaryExp (MOD,Constant 43,Constant ~5)) : Expression
val e100 = Negation (BinaryExp (MOD,Constant 43,Constant 5)) : Expression
val e101 = Negation (BinaryExp (MOD,Constant ~43,Constant ~5)) : Expression
val e102 = Negation (BinaryExp (MOD,Constant ~43,Constant 5)) : Expression
val e103 = BinaryExp (ADD,Constant ~1,Constant 0) : Expression
val e104 = BinaryExp (ADD,Constant ~1,Constant ~3) : Expression
val e105 = BinaryExp (ADD,Constant ~1,Constant 10) : Expression
val e106 = BinaryExp (ADD,Constant ~1,Constant 1) : Expression
val e107 = BinaryExp (ADD,Constant 10,Constant 10) : Expression
val e108 = BinaryExp (SUBTRACT,Constant ~1,Constant 0) : Expression
val e109 = BinaryExp (SUBTRACT,Constant 0,Constant ~1) : Expression
val e110 = BinaryExp (SUBTRACT,Constant 10,Constant 10) : Expression
val e111 = BinaryExp (SUBTRACT,Constant 10,Constant 3) : Expression
val e112 = BinaryExp (SUBTRACT,Constant 3,Constant 10) : Expression
val e113 = BinaryExp (MULT,Constant ~1,Constant 0) : Expression
val e114 = BinaryExp (MULT,Constant 0,Constant 1) : Expression
val e115 = BinaryExp (MULT,Constant ~1,Constant 10) : Expression
val e116 = BinaryExp (MULT,Constant 10,Constant 1) : Expression
val e117 = BinaryExp (MULT,Constant 10,Constant ~3) : Expression
val e118 = BinaryExp (MULT,Constant ~3,Constant 3) : Expression
val e119 = BinaryExp (MULT,Constant ~2,Constant ~3) : Expression
val e120 = BinaryExp (DIV,Constant ~1,Constant 0) : Expression
val e121 = BinaryExp (DIV,Constant 0,Constant 1) : Expression
val e122 = BinaryExp (DIV,Constant ~1,Constant 10) : Expression
val e123 = BinaryExp (DIV,Constant 10,Constant 1) : Expression
val e124 = BinaryExp (DIV,Constant 10,Constant ~3) : Expression
val e125 = BinaryExp (DIV,Constant ~3,Constant 3) : Expression
val e126 = BinaryExp (DIV,Constant ~2,Constant ~3) : Expression
val e127 = BinaryExp (DIV,Constant ~1,Constant 0) : Expression
val e128 = BinaryExp (DIV,Variable "n9",Variable "n12") : Expression
val e129 = BinaryExp (DIV,Variable "n9",Variable "n11") : Expression
val e130 = BinaryExp (DIV,Variable "n10",Variable "n12") : Expression
val e131 = BinaryExp (DIV,Variable "n10",Variable "n11") : Expression
val e132 = BinaryExp (MOD,Constant ~1,Constant 0) : Expression
val e133 = BinaryExp (MOD,Constant 0,Constant 1) : Expression
val e134 = BinaryExp (MOD,Constant ~1,Constant 10) : Expression
val e135 = BinaryExp (MOD,Constant 10,Constant 1) : Expression
val e136 = BinaryExp (MOD,Constant 10,Constant ~3) : Expression
val e137 = BinaryExp (MOD,Constant ~3,Constant 3) : Expression
val e138 = BinaryExp (MOD,Constant ~2,Constant ~3) : Expression
val e139 = BinaryExp (MOD,Constant ~1,Constant 0) : Expression
val e140 = BinaryExp (MOD,Variable "n9",Variable "n12") : Expression
val e141 = BinaryExp (MOD,Variable "n9",Variable "n11") : Expression
val e142 = BinaryExp (MOD,Variable "n10",Variable "n12") : Expression
val e143 = BinaryExp (MOD,Variable "n10",Variable "n11") : Expression
val e144 = Negation (BinaryExp (ADD,Constant ~1,Constant 0)) : Expression
val e145 = Negation (BinaryExp (ADD,Constant ~1,Constant ~3)) : Expression
val e146 = Negation (BinaryExp (ADD,Constant ~1,Constant 10)) : Expression
val e147 = Negation (BinaryExp (ADD,Constant ~1,Constant 1)) : Expression
val e148 = Negation (BinaryExp (ADD,Constant 10,Constant 10)) : Expression
val e149 = Negation (BinaryExp (SUBTRACT,Constant ~1,Constant 0)) : Expression
val e150 = Negation (BinaryExp (SUBTRACT,Constant 0,Constant ~1)) : Expression
val e151 = Negation (BinaryExp (SUBTRACT,Constant 10,Constant 10))
  : Expression
val e152 = Negation (BinaryExp (SUBTRACT,Constant 10,Constant 3)) : Expression
val e153 = Negation (BinaryExp (SUBTRACT,Constant 3,Constant 10)) : Expression
val e154 = Negation (BinaryExp (MULT,Constant ~1,Constant 0)) : Expression
val e155 = Negation (BinaryExp (MULT,Constant 0,Constant 1)) : Expression
val e156 = Negation (BinaryExp (MULT,Constant ~1,Constant 10)) : Expression
val e157 = Negation (BinaryExp (MULT,Constant 10,Constant 1)) : Expression
val e158 = Negation (BinaryExp (MULT,Constant 10,Constant ~3)) : Expression
val e159 = Negation (BinaryExp (MULT,Constant ~3,Constant 3)) : Expression
val e160 = Negation (BinaryExp (MULT,Constant ~2,Constant ~3)) : Expression
val e161 = Negation (BinaryExp (DIV,Constant ~1,Constant 0)) : Expression
val e162 = Negation (BinaryExp (DIV,Constant 0,Constant 1)) : Expression
val e163 = Negation (BinaryExp (DIV,Constant ~1,Constant 10)) : Expression
val e164 = Negation (BinaryExp (DIV,Constant 10,Constant 1)) : Expression
val e165 = Negation (BinaryExp (DIV,Constant 10,Constant ~3)) : Expression
val e166 = Negation (BinaryExp (DIV,Constant ~3,Constant 3)) : Expression
val e167 = Negation (BinaryExp (DIV,Constant ~2,Constant ~3)) : Expression
val e168 = Negation (BinaryExp (DIV,Constant ~1,Constant 0)) : Expression
val e169 = Negation (BinaryExp (DIV,Variable "n9",Variable "n12"))
  : Expression
val e170 = Negation (BinaryExp (DIV,Variable "n9",Variable "n11"))
  : Expression
val e171 = Negation (BinaryExp (DIV,Variable "n10",Variable "n12"))
  : Expression
val e172 = Negation (BinaryExp (DIV,Variable "n10",Variable "n11"))
  : Expression
val e173 = Negation (BinaryExp (MOD,Constant ~1,Constant 0)) : Expression
val e174 = Negation (BinaryExp (MOD,Constant 0,Constant 1)) : Expression
val e175 = Negation (BinaryExp (MOD,Constant ~1,Constant 10)) : Expression
val e176 = Negation (BinaryExp (MOD,Constant 10,Constant 1)) : Expression
val e177 = Negation (BinaryExp (MOD,Constant 10,Constant ~3)) : Expression
val e178 = Negation (BinaryExp (MOD,Constant ~3,Constant 3)) : Expression
val e179 = Negation (BinaryExp (MOD,Constant ~2,Constant ~3)) : Expression
val e180 = Negation (BinaryExp (MOD,Constant ~1,Constant 0)) : Expression
val e181 = Negation (BinaryExp (MOD,Variable "n9",Variable "n12"))
  : Expression
val e182 = Negation (BinaryExp (MOD,Variable "n9",Variable "n11"))
  : Expression
val e183 = Negation (BinaryExp (MOD,Variable "n10",Variable "n12"))
  : Expression
val e183 = Negation (BinaryExp (MOD,Variable "n10",Variable "n11"))
  : Expression
val it = "~1" : string
val it = "0" : string
val it = "1" : string
val it = "~2" : string
val it = "~3" : string
val it = "2" : string
val it = "3" : string
val it = "10" : string
val it = "Eval Error: the variable n1 is undefined." : string
val it = "Eval Error: the variable n2 is undefined." : string
val it = "Eval Error: the variable n3 is undefined." : string
val it = "Eval Error: the variable n4 is undefined." : string
val it = "Eval Error: the variable n5 is undefined." : string
val it = "Eval Error: the variable n6 is undefined." : string
val it = "Eval Error: the variable n7 is undefined." : string
val it = "Eval Error: the variable n8 is undefined." : string
val it = "Eval Error: the variable n9 is undefined." : string
val it = "Eval Error: the variable n10 is undefined." : string
val it = "Eval Error: the variable n11 is undefined." : string
val it = "Eval Error: the variable n12 is undefined." : string
val it = "~1" : string
val it = "~4" : string
val it = "9" : string
val it = "0" : string
val it = "20" : string
val it = "~1" : string
val it = "1" : string
val it = "0" : string
val it = "7" : string
val it = "~7" : string
val it = "0" : string
val it = "0" : string
val it = "~10" : string
val it = "10" : string
val it = "~30" : string
val it = "~9" : string
val it = "6" : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "~1" : string
val it = "10" : string
val it = "~4" : string
val it = "~1" : string
val it = "0" : string
val it = "Eval Error: division by zero." : string
val it = "~9" : string
val it = "8" : string
val it = "8" : string
val it = "~9" : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "9" : string
val it = "0" : string
val it = "~2" : string
val it = "0" : string
val it = "~2" : string
val it = "Eval Error: division by zero." : string
val it = "~2" : string
val it = "3" : string
val it = "~3" : string
val it = "2" : string
val it = "1" : string
val it = "4" : string
val it = "~9" : string
val it = "0" : string
val it = "~20" : string
val it = "1" : string
val it = "~1" : string
val it = "0" : string
val it = "~7" : string
val it = "7" : string
val it = "0" : string
val it = "0" : string
val it = "10" : string
val it = "~10" : string
val it = "30" : string
val it = "9" : string
val it = "~6" : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "1" : string
val it = "~10" : string
val it = "4" : string
val it = "1" : string
val it = "0" : string
val it = "Eval Error: division by zero." : string
val it = "9" : string
val it = "~8" : string
val it = "~8" : string
val it = "9" : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "~9" : string
val it = "0" : string
val it = "2" : string
val it = "0" : string
val it = "2" : string
val it = "Eval Error: division by zero." : string
val it = "2" : string
val it = "~3" : string
val it = "3" : string
val it = "~2" : string
val it = "~1" : string
val it = "~4" : string
val it = "9" : string
val it = "0" : string
val it = "20" : string
val it = "~1" : string
val it = "1" : string
val it = "0" : string
val it = "7" : string
val it = "~7" : string
val it = "0" : string
val it = "0" : string
val it = "~10" : string
val it = "10" : string
val it = "~30" : string
val it = "~9" : string
val it = "6" : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "~1" : string
val it = "10" : string
val it = "~4" : string
val it = "~1" : string
val it = "0" : string
val it = "Eval Error: division by zero." : string
val it = "Eval Error: the variable n12 is undefined." : string
val it = "Eval Error: the variable n11 is undefined." : string
val it = "Eval Error: the variable n12 is undefined." : string
val it = "Eval Error: the variable n11 is undefined." : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "9" : string
val it = "0" : string
val it = "~2" : string
val it = "0" : string
val it = "~2" : string
val it = "Eval Error: division by zero." : string
val it = "Eval Error: the variable n12 is undefined." : string
val it = "Eval Error: the variable n11 is undefined." : string
val it = "Eval Error: the variable n12 is undefined." : string
val it = "Eval Error: the variable n11 is undefined." : string
val it = "1" : string
val it = "4" : string
val it = "~9" : string
val it = "0" : string
val it = "~20" : string
val it = "1" : string
val it = "~1" : string
val it = "0" : string
val it = "~7" : string
val it = "7" : string
val it = "0" : string
val it = "0" : string
val it = "10" : string
val it = "~10" : string
val it = "30" : string
val it = "9" : string
val it = "~6" : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "1" : string
val it = "~10" : string
val it = "4" : string
val it = "1" : string
val it = "0" : string
val it = "Eval Error: division by zero." : string
val it = "Eval Error: the variable n12 is undefined." : string
val it = "Eval Error: the variable n11 is undefined." : string
val it = "Eval Error: the variable n12 is undefined." : string
val it = "Eval Error: the variable n11 is undefined." : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "~9" : string
val it = "0" : string
val it = "2" : string
val it = "0" : string
val it = "2" : string
val it = "Eval Error: division by zero." : string
val it = "Eval Error: the variable n12 is undefined." : string
val it = "Eval Error: the variable n11 is undefined." : string
val it = "Eval Error: the variable n11 is undefined." : string
val it = "~1" : string
val it = "0" : string
val it = "1" : string
val it = "~2" : string
val it = "~3" : string
val it = "2" : string
val it = "3" : string
val it = "10" : string
val it = "43" : string
val it = "~43" : string
val it = "5" : string
val it = "~5" : string
val it = "~1" : string
val it = "~4" : string
val it = "9" : string
val it = "0" : string
val it = "20" : string
val it = "~1" : string
val it = "1" : string
val it = "0" : string
val it = "7" : string
val it = "~7" : string
val it = "0" : string
val it = "0" : string
val it = "~10" : string
val it = "10" : string
val it = "~30" : string
val it = "~9" : string
val it = "6" : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "~1" : string
val it = "10" : string
val it = "~4" : string
val it = "~1" : string
val it = "0" : string
val it = "Eval Error: division by zero." : string
val it = "~9" : string
val it = "8" : string
val it = "8" : string
val it = "~9" : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "9" : string
val it = "0" : string
val it = "~2" : string
val it = "0" : string
val it = "~2" : string
val it = "Eval Error: division by zero." : string
val it = "~2" : string
val it = "3" : string
val it = "~3" : string
val it = "2" : string
val it = "1" : string
val it = "4" : string
val it = "~9" : string
val it = "0" : string
val it = "~20" : string
val it = "1" : string
val it = "~1" : string
val it = "0" : string
val it = "~7" : string
val it = "7" : string
val it = "0" : string
val it = "0" : string
val it = "10" : string
val it = "~10" : string
val it = "30" : string
val it = "9" : string
val it = "~6" : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "1" : string
val it = "~10" : string
val it = "4" : string
val it = "1" : string
val it = "0" : string
val it = "Eval Error: division by zero." : string
val it = "9" : string
val it = "~8" : string
val it = "~8" : string
val it = "9" : string
val it = "Eval Error: division by zero." : string
val it = "0" : string
val it = "~9" : string
val it = "0" : string
val it = "2" : string
val it = "0" : string
val it = "2" : string
val it = "Eval Error: division by zero." : string
val it = "2" : string
val it = "~3" : string
val it = "~2" : string
- 
